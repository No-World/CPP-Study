int h[N], e[N], ne[N], idx, root, depth[N], fa[N][19], bw = 18, q[N];

void add(int a, int b){
	ne[idx] = h[a], e[idx] = b, h[a] = idx ++;
}
char str[N];

void bfs(){//初始化
    memset(depth, 0x3f, sizeof depth);
    int hh = 0, tt = 0;
    q[0] = root;//根节点入队
    depth[root] = 1, depth[0] = 0;
    while(hh <= tt){
        int f = q[hh ++];//取出队头
        for(int i = h[f]; ~i; i = ne[i]){//遍历邻边
            int j = e[i];
            if(depth[j] > depth[f] + 1){
                depth[j] = depth[f] + 1;
                q[++ tt] = j;
                fa[j][0] = f;
                for(int k = 1; k <= bw; k ++)
                    fa[j][k] = fa[fa[j][k-1]][k-1];
            }

        }
    }
}

int LCA(int a, int b){
    if(depth[a] < depth[b]) std::swap(a, b);//保持a的是深层
    //让a走到和b一样深的地方去
    for(int i = bw; i >= 0; i --)
        if(depth[fa[a][i]] >= depth[b])
            a = fa[a][i]; 
    if(a == b) return a;//说明b是a和b的公共祖先(不一定是最近公共祖先)
    //让a和b一起往上跳到最近公共祖先的先前一个点
    for(int i = bw; i >= 0; i -- ){
        if(fa[a][i] != fa[b][i]){
            a = fa[a][i];
            b = fa[b][i];
        }
    }

    return fa[a][0];
}