int root[M], a[M];

struct node{
	int l, r;
	int v;
}tr[M * 25A];

void build_tree(int &u, int l, int r){
	u = ++ idx;
	if(l == r){
		tr[u].v = a[l];
		return ;
	}
	int mid = l + r >> 1;
	build_tree(tr[u].l, l, mid);
	build_tree(tr[u].r, mid + 1, r);
}

void modify(int p, int &q, int l, int r, int pos, int v){
	q = ++ idx;
	tr[q] = tr[p];//复制信息
	if(l == r){
		tr[q].v = v;
		return ;
	}
	int mid = l + r >> 1;
	if(pos <= mid)	modify(tr[p].l, tr[q].l, l, mid, pos, v);
	else modify(tr[p].r, tr[q].r, mid + 1, r, pos, v);
}

int query(int u, int l, int r, int pos){
	if(l == r)	return tr[u].v;
	int mid = l + r >> 1;
	if(pos <= mid)	return query(tr[u].l, l, mid, pos);
	return query(tr[u].r, mid + 1, r, pos);
}

void solve(){
	cin >> n >> m;
	for(int i = 1; i <= n; i ++)	cin >> a[i];
	build_tree(root[0], 1, n);
	
	for(int i = 1; i <= m; i ++){
		int ver, op, v, pos;
		cin >> ver >> op >> pos;
		if(op == 1){
			cin >> v;
			modify(root[ver], root[i], 1, n, pos, v);
		}else{
			cout << query(root[ver], 1, n, pos) << endl;
			root[i] = root[ver];
		}
	}
}