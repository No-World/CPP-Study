const int base = 1919813;
char s[N];
uint64_t sum1[N], val1[N];
inline int get(char x) {
    if (x <= '9' && x >= '0') return x - '0' + 1;
    else if (x >= 'a' && x <= 'z') return x - 'a' + 11;
    else return x - 'A' + 37; 
}

inline void get_hash() {
    for (int i = 1; i <= n; i++) {
        sum1[i] = sum1[i - 1] * base + get(s[i]);
    } 
}

inline void Init() {
	val1[0] = 1;
  	for (int i = 1; i < N; i++) {
        val1[i] = val1[i - 1] * base;
  	}
}

inline uint64_t query(int l, int r) {
    return sum1[r] - sum1[l - 1] * val1[r - l + 1];
}


inline void merge(node &t, uint64_t l1, uint64_t r1, int len) {
	t.v1 = l1 * val1[len] + r1;
}
