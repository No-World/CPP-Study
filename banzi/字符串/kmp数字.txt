#include <iostream>
#include <cstring>
#include <iomanip>
#include <algorithm>
#include <stack>
#include <queue>
#include <numeric>
#include <cassert>
#include <bitset>
#include <cstdio>
#include <vector>
#include <unordered_set>
#include <cmath>
#include <map>
#include <unordered_map>
#include <set>
#include <deque>

#define all(a) a.begin(), a.end()
#define cnt0(x) __builtin_ctz(x)
#define endl '\n'
#define itn int
#define ll long long
#define ull unsigned long long
#define rep(i, a, b) for(int i = a;i <= b; i ++)
#define per(i, a, b) for(int i = a;i >= b; i --)
#define cntone(x) __builtin_popcount(x)
#define db double
#define fs first
#define se second
#define AC main(void)
#define HYS std::ios::sync_with_stdio(false);std::cin.tie(0);std::cout.tie(0);
typedef std::pair<int, int > PII;
typedef std::pair<int, std::pair<int, int>> PIII;
typedef std::pair<ll, ll> Pll;
typedef std::pair<double, double> PDD;
using ld = double long;

const int MOD = 1e9 + 7;
const long double eps = 1e-9;
int d1[] = {0, 0, 1, -1};
int d2[] = {1, -1, 0, 0};
const int N = 4e5 + 10, M = 8e5 + 10, maxn = 1e6 + 10 ;
const int INF = 0x3f3f3f3f;
int n, m;
int _ = 1;
int a[maxn], b[maxn];

struct KMP{
    int nxt[maxn];int len;
    int t[maxn];
    void clear(){
        len = nxt[0] = nxt[1] =0;
    }
    /* 1-bas */
    /* 注意在ss结尾添加‘\0’ */
    void init(int* ss, int n){
        len = n;
        memcpy(t, ss, (len + 2) * sizeof(int));
        for (int i = 2; i <= len; i ++){
            nxt[i] = nxt[i-1];
            while (nxt[i] && ss[i] != ss[nxt[i] + 1]) nxt[i] = nxt[nxt[i]];
            nxt[i] += (ss[i] == ss[nxt[i] + 1]);
        }
    }
    /* 求所有在ss串中的start_pos. 如果first_only设置为true，则只返回第一个位置*/
    std::vector<int> match(int *ss, int n, bool first_only = false){
        int len_s = n;
        std::vector<int> start_pos(0);
        for (int i = 1, j = 1; i <= len_s;){
            while (j !=1 && ss[i] != t[j]) j = nxt[j - 1] + 1;
            if (ss[i] == t[j]) j ++,i ++;
            else i ++;
            if (j == len + 1){
                start_pos.push_back(i - j + 1);
                if (first_only)return start_pos;
                j = nxt[len] + 1;
            }
        }
        return start_pos;
    }
    void debug(){
        for (int i = 0; i <= len; i ++){
            printf("[debug] nxt[%d]=%d\n", i, nxt[i]);
        }
    }
    /* 循环周期 形如 acaca 中 ac 是一个合法周期 */
    std::vector<int> periodic(){
        std::vector<int> ret;
        int now = len;
        while (now){
            now = nxt[now];
            ret.push_back(len - now);
        }
        return ret;
    }
    /* 循环节 形如 acac 中ac、acac是循环节，aca不是*/
    std::vector<int> periodic_loop(){
        std::vector<int>ret ;
        for (int x : periodic()){
            if (len % x == 0) ret.push_back(x);
        }
        return ret;
    }
    int min_periodic_loop(){
        return periodic_loop()[0];
    }
}kmp;

void solve(){
	int k;
	std::cin >> n >> m >> k;

	for(int i = 0; i < n; i ++)	std::cin >> a[i];
	for(int i = 0; i < m; i ++)	std::cin >> b[i];
	for(int i = n - 1; i; i --)	a[i] = ((a[i - 1] - a[i]) % k + k) % k;
	for(int i = m - 1; i; i --)	b[i] = ((b[i] - b[i - 1]) % k + k) % k;
	kmp.init(b, m - 1);
	auto t = kmp.match(a, n - 1, false);;
	std::cout << t.size() << '\n';
}
signed AC{
    HYS
    
	std::cin >> _;
	while(_ --)
        solve();
    
    return 0;
}