int T[N << 2];

inline void build(int u, int l, int r){
	T[u] = ++ idx;
	if(l == r)	return ;
	int mid = l + r >> 1;
	build(u << 1, l, mid);
	build(u << 1 | 1, mid + 1, r);
}

struct node{
	int l, r;
	ll sum, add;
}tr[N * 17 * 17];

inline int get_sum(int a, int b, int c, int d){
	return std::min(b, d) - std::max(a, c) + 1;
}

inline void update(int u, int L, int R, int l, int r){
	tr[u].sum += get_sum(L, R, l, r);
	if(L >= l && R <= r){
		tr[u].add ++;
		return ;
	}
	
	int mid = L + R >> 1;
	
	if(l <= mid){
		if(!tr[u].l)	tr[u].l = ++ idx;
		update(tr[u].l, L, mid, l, r);
	}
	
	if(r > mid){
		if(!tr[u].r)	tr[u].r = ++ idx;
		update(tr[u].r, mid + 1, R, l, r);
	}
}

//T[u]作为每颗线段树的根节点 L, R为权值线段树的左右端点 l, r是需要去普通线段树搞的端点
inline void modify(int u, int L, int R, int l, int r, int x){
	update(T[u], 1, n, l, r);
	if(L == R)	return ;
	int mid = L + R >> 1;
	if(x <= mid)	modify(u << 1, L, mid, l, r, x);
	else modify(u << 1 | 1, mid + 1, R, l, r, x);
}

inline int sum(int u, int L, int R, int l, int r, int add){
	if(!u)	get_sum(L, R, l, r) * add;
	if(L >= l && R <= r)	return tr[u].sum + 1ll * add * get_sum(L, R, l, r);
	ll tot = 0;
	int mid = L + R >> 1;
	if(l <= mid)	tot += sum(tr[u].l, L, mid, l, r, add + tr[u].add);
	if(r > mid)	tot += sum(tr[u].r, mid + 1, R, l, r, add + tr[u].add);
	return tot;
}

int query(int u, int l, int r, int a, int b, int c){
    if (l == r) return r;
    int mid = l + r >> 1;
    ll k = sum(T[u << 1 | 1], 1, n, a, b, 0);
    if (k >= c) return query(u << 1 | 1, mid + 1, r, a, b, c);
    return query(u << 1, l, mid, a, b, c - k);
}
struct Query{
	int op, a, b, c;
}q[N];

inline void solve(){
	std::cin >> n >> m;
	std::vector<int> nums;
    for(int i = 0; i < m; i ++){
        std::cin >> q[i].op >> q[i].a >> q[i].b >> q[i].c;
        nums.push_back(q[i].c);
    }

    sort(nums.begin(), nums.end());
    nums.erase(unique(nums.begin(), nums.end()), nums.end());
    int len = nums.size() - 1;
    build(1, 0, len);

    for(int i = 0; i < m; i ++){
        int op = q[i].op, a = q[i].a, b = q[i].b, c = q[i].c;
        if(op == 1){
            c = std::lower_bound(all(nums), c) - nums.begin();
            modify(1, 0, len, a, b, c);
        }
           
        else
            std::cout << nums[query(1, 0, len, a, b, c)] << endl;
    }
}